version: '3.8'

services:
  # Backend API Server
  backend:
    image: ${DOCKER_IMAGE_BACKEND:-ashone91/trading-backend}:${TAG:-latest}
    container_name: trading-backend-prod
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=PROD
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=Info
    volumes:
      # 설정 파일은 호스트에서 미리 준비
      - /opt/trading/configs/base_web_server-config.json:/app/application/base_web_server/base_web_server-config.json:ro
      - /opt/trading/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - trading-network
    depends_on:
      - redis
      - mysql

  # Frontend Next.js Server
  frontend:
    image: ${DOCKER_IMAGE_FRONTEND:-ashone91/trading-frontend}:${TAG:-latest}
    container_name: trading-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://backend:8000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - trading-network

  # Redis Cache (로컬 컨테이너 - EC2 Redis 사용시 제거)
  redis:
    image: redis:7-alpine
    container_name: trading-redis-prod
    ports:
      - "6379:6379"
    command: redis-server --requirepass YOUR_REDIS_PASSWORD
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - trading-network

  # MySQL Database (로컬 컨테이너 - RDS 사용시 제거)
  mysql:
    image: mysql:8.0
    container_name: trading-mysql-prod
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=YOUR_DB_PASSWORD
      - MYSQL_DATABASE=finance_global
      - MYSQL_USER=YOUR_DB_USERNAME
      - MYSQL_PASSWORD=YOUR_DB_PASSWORD
    volumes:
      - mysql-data:/var/lib/mysql
      - /opt/trading/db_scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pYOUR_DB_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge

volumes:
  redis-data:
  mysql-data:

# =============================================================================
# 🚀 프로덕션 배포 사용법
# =============================================================================
#
# 1️⃣ 설정 파일 준비 (EC2에서):
#    sudo mkdir -p /opt/trading/configs
#    sudo mkdir -p /opt/trading/logs
#    sudo mkdir -p /opt/trading/db_scripts
#
#    # Backend 설정 파일 생성 (RDS/Redis EC2 사용시)
#    sudo vi /opt/trading/configs/base_web_server-config.json
#    {
#      "templateConfig": {
#        "appId": "finance_app",
#        "env": "PROD",
#        "skipAwsTests": true
#      },
#      "databaseConfig": {
#        "type": "mysql",
#        "host": "trading-mysql-db.xxxx.rds.amazonaws.com",  # RDS 엔드포인트
#        "port": 3306,
#        "user": "trading",
#        "password": "YOUR_PASSWORD",
#        "database": "finance_global",
#        "shard_databases": ["finance_shard_1", "finance_shard_2"]
#      },
#      "cacheConfig": {
#        "type": "redis",
#        "host": "10.0.x.x",  # Redis EC2 Private IP
#        "port": 6379,
#        "password": "YOUR_PASSWORD",
#        "session_expire_seconds": 3600
#      }
#    }
#
# 2️⃣ Docker Compose 실행:
#    # 전체 스택 실행 (로컬 DB/Redis 포함)
#    docker-compose -f docker-compose.prod.yml up -d
#
#    # 또는 외부 DB/Redis 사용시 (backend/frontend만)
#    docker-compose -f docker-compose.prod.yml up -d backend frontend
#
# 3️⃣ 상태 확인:
#    docker-compose -f docker-compose.prod.yml ps
#    docker-compose -f docker-compose.prod.yml logs -f
#
# 4️⃣ 서비스 접속:
#    http://서버IP:3000  # Frontend
#    http://서버IP:8000  # Backend API
#
# 5️⃣ 업데이트 (Rolling Update):
#    export TAG=v1.0.1  # 새 버전 태그
#    docker-compose -f docker-compose.prod.yml pull
#    docker-compose -f docker-compose.prod.yml up -d --no-deps backend
#    docker-compose -f docker-compose.prod.yml up -d --no-deps frontend
#
# 6️⃣ 정리:
#    docker-compose -f docker-compose.prod.yml down
#    docker-compose -f docker-compose.prod.yml down -v  # 볼륨 포함 삭제
#
# =============================================================================
# 🔧 환경 변수 설정 (.env 파일)
# =============================================================================
# DOCKER_IMAGE_BACKEND=ashone91/trading-backend
# DOCKER_IMAGE_FRONTEND=ashone91/trading-frontend
# TAG=latest
# =============================================================================