pipeline {
    agent any
    
    environment {
        // Docker Hub 설정
        DOCKER_HUB_REPO_BACKEND = 'ashone91/trading-backend'
        DOCKER_HUB_REPO_FRONTEND = 'ashone91/trading-frontend'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'  // ⚠️ 실제 Jenkins Credentials ID와 일치해야 함
        
        // GitHub 설정
        GIT_REPO = 'https://github.com/SKNETWORKS-FAMILY-AICAMP/SKN12-FINAL-2TEAM.git'
        GIT_BRANCH = 'main'
    }
    
    stages {
        stage('🔍 Checkout') {
            steps {
                echo "GitHub 저장소에서 코드 가져오기..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    userRemoteConfigs: [[url: "${GIT_REPO}"]]
                ])
                
                script {
                    // 빌드 태그 생성 (Git checkout 후)
                    env.GIT_COMMIT_SHORT = sh(
                        script: 'git rev-parse HEAD | cut -c1-7',
                        returnStdout: true
                    ).trim()
                    env.BUILD_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}"
                    
                    // Git 정보 출력
                    sh '''
                        echo "Branch: ${GIT_BRANCH}"
                        echo "Commit: $(git rev-parse HEAD)"
                        echo "Build Tag: ${BUILD_TAG}"
                        echo "Author: $(git log -1 --pretty=format:'%an')"
                        echo "Message: $(git log -1 --pretty=format:'%s')"
                    '''
                }
            }
        }
        
        stage('🔨 Build Docker Images') {
            parallel {
                stage('Backend Build') {
                    steps {
                        echo "Backend Docker 이미지 빌드 시작..."
                        dir('base_server') {
                            sh '''
                                docker build -t ${DOCKER_HUB_REPO_BACKEND}:${BUILD_TAG} \
                                            -t ${DOCKER_HUB_REPO_BACKEND}:latest \
                                            -f Dockerfile .
                                
                                echo "Backend 이미지 빌드 완료: ${DOCKER_HUB_REPO_BACKEND}:${BUILD_TAG}"
                            '''
                        }
                    }
                }
                
                stage('Frontend Build') {
                    steps {
                        echo "Frontend Docker 이미지 빌드 시작..."
                        dir('base_server/frontend/ai-trading-platform') {
                            sh '''
                                # 프로덕션 환경변수로 Frontend 이미지 빌드 (build-time 주입)
                                docker build -t ${DOCKER_HUB_REPO_FRONTEND}:${BUILD_TAG} \
                                            -t ${DOCKER_HUB_REPO_FRONTEND}:latest \
                                            --build-arg NEXT_PUBLIC_API_URL=https://bullant-kr.com \
                                            --build-arg NEXT_PUBLIC_WS_URL=wss://bullant-kr.com \
                                            --build-arg NEXT_PUBLIC_API_TIMEOUT=10000 \
                                            -f Dockerfile .
                                            
                                echo "Frontend 이미지 빌드 완료: ${DOCKER_HUB_REPO_FRONTEND}:${BUILD_TAG}"
                                echo "✅ 프로덕션 환경변수 build-time 주입 완료 (https://bullant-kr.com)"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('📤 Push to Docker Hub') {
            steps {
                echo "Docker Hub로 이미지 푸시..."
                withCredentials([usernamePassword(
                    credentialsId: "${DOCKER_CREDENTIALS_ID}",
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh '''
                        # Docker Hub 로그인
                        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                        
                        # Backend 이미지 푸시
                        echo "Backend 이미지 푸시 중..."
                        docker push ${DOCKER_HUB_REPO_BACKEND}:${BUILD_TAG}
                        docker push ${DOCKER_HUB_REPO_BACKEND}:latest
                        
                        # Frontend 이미지 푸시
                        echo "Frontend 이미지 푸시 중..."
                        docker push ${DOCKER_HUB_REPO_FRONTEND}:${BUILD_TAG}
                        docker push ${DOCKER_HUB_REPO_FRONTEND}:latest
                        
                        # 로그아웃
                        docker logout
                        
                        echo "✅ Docker Hub 푸시 완료!"
                    '''
                }
            }
        }
        
        stage('🚀 Deploy to Auto Scaling Groups') {
            steps {
                echo "Auto Scaling Group 인스턴스 새로 고침 시작..."
                
                script {
                    try {
                        // Backend Auto Scaling Group 인스턴스 새로 고침
                        echo "Backend Auto Scaling Group 배포 중..."
                        sh '''
                            aws autoscaling start-instance-refresh \
                                --auto-scaling-group-name trading-backend-asg \
                                --preferences '{"MinHealthyPercentage":50,"InstanceWarmup":300}'
                        '''
                        
                        // Frontend Auto Scaling Group 인스턴스 새로 고침  
                        echo "Frontend Auto Scaling Group 배포 중..."
                        sh '''
                            aws autoscaling start-instance-refresh \
                                --auto-scaling-group-name trading-frontend-asg \
                                --preferences '{"MinHealthyPercentage":50,"InstanceWarmup":300}'
                        '''
                        
                        echo """
                        ========================================
                        🎉 배포 시작됨! 
                        ========================================
                        
                        새로운 Docker 이미지 배포:
                        - Backend: ${DOCKER_HUB_REPO_BACKEND}:${BUILD_TAG}
                        - Frontend: ${DOCKER_HUB_REPO_FRONTEND}:${BUILD_TAG}
                        
                        Auto Scaling Groups가 무중단으로 
                        인스턴스를 새로 고침합니다 (약 5-10분 소요)
                        
                        배포 진행 상황:
                        AWS Console → EC2 → Auto Scaling Groups
                        → Instance refresh 탭에서 확인
                        
                        배포 완료 후 확인:
                        https://bullant-kr.com
                        
                        ========================================
                        """
                        
                    } catch (Exception e) {
                        echo "⚠️ Instance Refresh 실패: ${e.getMessage()}"
                        echo "수동으로 AWS Console에서 Instance Refresh 실행하세요."
                        
                        // 실패해도 빌드는 성공으로 처리 (이미지는 푸시됨)
                        currentBuild.result = 'SUCCESS'
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo """
            ✅ ✅ ✅ 파이프라인 성공! ✅ ✅ ✅
            
            빌드 번호: ${BUILD_NUMBER}
            빌드 태그: ${BUILD_TAG}
            
            Docker Hub에서 확인:
            https://hub.docker.com/r/ashone91/trading-backend/tags
            https://hub.docker.com/r/ashone91/trading-frontend/tags
            """
        }
        
        failure {
            echo """
            ❌ ❌ ❌ 파이프라인 실패! ❌ ❌ ❌
            
            로그를 확인하여 문제를 해결하세요.
            Jenkins Blue Ocean에서 상세 로그 확인 가능합니다.
            """
        }
        
        always {
            script {
                try {
                    // 디스크 공간 확보를 위한 정리
                    sh '''
                        echo "Docker 이미지 정리 중..."
                        docker image prune -f || true
                        docker container prune -f || true
                        
                        # 오래된 이미지 삭제 (3일 이상)
                        docker image prune -a --filter "until=72h" -f || true
                        
                        echo "정리 완료!"
                    '''
                } catch (Exception e) {
                    echo "정리 과정에서 오류 발생: ${e.getMessage()}"
                }
            }
        }
    }
}