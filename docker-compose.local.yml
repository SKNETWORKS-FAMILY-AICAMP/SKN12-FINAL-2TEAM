version: '3.8'

services:
  # Backend API Server
  backend:
    build:
      context: ./base_server
      dockerfile: Dockerfile
    image: ashone91/trading-backend:local
    container_name: trading-backend-test
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=LOCAL
      - PYTHONUNBUFFERED=1
    volumes:
      # Backend 설정 파일 마운팅 (01 문서 방식)
      - "C:/SKN12-FINAL-2TEAM/base_server/application/base_web_server/base_web_server-config_local.json:/app/application/base_web_server/base_web_server-config_local.json:ro"
      # 로그 디렉토리 마운팅
      - "C:/docker-logs:/app/logs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

  # Frontend Next.js Server
  frontend:
    build:
      context: ./base_server/frontend/ai-trading-platform
      dockerfile: Dockerfile
    image: ashone91/trading-frontend:local
    container_name: trading-frontend-test
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      # Frontend 설정 파일 마운팅 (Backend 방식 따라함)
      - "C:/docker-frontend-configs/.env:/app/.env:ro"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - trading-network

networks:
  trading-network:
    driver: bridge

# =============================================================================
# 🚀 사용법 (Windows 로컬 테스트)
# =============================================================================
#
# 1️⃣ 설정 파일 준비:
#    mkdir C:\docker-logs -Force
#    mkdir C:\docker-frontend-configs -Force
#    
#    # Frontend 설정 파일 생성
#    echo "NEXT_PUBLIC_API_URL=http://backend:8000" > C:\docker-frontend-configs\.env
#    echo "NEXT_PUBLIC_WS_URL=ws://backend:8000" >> C:\docker-frontend-configs\.env
#    echo "BACKEND_URL=http://backend:8000" >> C:\docker-frontend-configs\.env
#
# 2️⃣ 실행:
#    docker-compose -f docker-compose.local.yml up -d
#
# 3️⃣ 확인:
#    http://localhost:8000  # Backend API
#    http://localhost:3000  # Frontend UI
#
# 4️⃣ 로그 확인:
#    docker-compose -f docker-compose.local.yml logs -f
#
# 5️⃣ 정리:
#    docker-compose -f docker-compose.local.yml down
#
# =============================================================================