"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { XMarkIcon, ArrowRightIcon, ArrowLeftIcon, EyeIcon } from "@heroicons/react/24/outline"

const tutorialSteps = [
  {
    id: 1,
    title: "ÌôòÏòÅÌï©ÎãàÎã§! üéâ",
    description: "Í∏∞Í∞Ä Î≤ÑÌïèÏùò ÌïµÏã¨ Í∏∞Îä•Îì§ÏùÑ Ïã§Ï†ú ÌôîÎ©¥ÏóêÏÑú ÏßÅÏ†ë Ï≤¥ÌóòÌï¥Î≥¥ÏÑ∏Ïöî.",
    page: "dashboard",
    target: ".dashboard-content",
    position: "bottom-right",
    content: "ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú Ìà¨Ïûê ÌòÑÌô©ÏùÑ Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§. Í∞Å Ïπ¥ÎìúÎ•º ÌÅ¥Î¶≠Ìï¥Î≥¥ÏÑ∏Ïöî!",
    action: "Ïπ¥ÎìúÎ•º ÌÅ¥Î¶≠Ìï¥ÏÑú ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 2,
    title: "Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏöîÏïΩ üìä",
    description: "Ìà¨Ïûê ÌòÑÌô©ÏùÑ ÌïúÎààÏóê ÌååÏïÖÌïòÏÑ∏Ïöî.",
    page: "dashboard",
    target: ".portfolio-cards",
    position: "bottom",
    content: "Ï¥ù ÏûêÏÇ∞, ÏàòÏùµÎ•†, ÌòÑÍ∏à, Î≥¥Ïú† Ï¢ÖÎ™© ÏàòÎ•º Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.",
    action: "Í∞Å Ïπ¥ÎìúÏóê ÎßàÏö∞Ïä§Î•º Ïò¨Î†§Î≥¥Í≥† ÌÅ¥Î¶≠Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 3,
    title: "ÏÑ±Í≥º Ï∞®Ìä∏ Î∂ÑÏÑù üìà",
    description: "ÏãúÍ∞ÅÏ†ÅÏúºÎ°ú Ìà¨Ïûê ÏÑ±Í≥ºÎ•º Î∂ÑÏÑùÌïòÏÑ∏Ïöî.",
    page: "dashboard",
    target: ".performance-chart",
    position: "top",
    content: "Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÑ±Í≥ºÏôÄ ÏûêÏÇ∞ Î∞∞Î∂ÑÏùÑ Ï∞®Ìä∏Î°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.",
    action: "Ï∞®Ìä∏ ÏúÑÏóê ÎßàÏö∞Ïä§Î•º Ïò¨Î†§ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 4,
    title: "Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Í¥ÄÎ¶¨ üíº",
    description: "Ïù¥Ï†ú Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÑπÏÖòÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.",
    page: "portfolio",
    target: null,
    position: "center",
    content: "Ïó¨Í∏∞ÏÑú Î≥¥Ïú† Ï¢ÖÎ™©ÏùÑ ÏÉÅÏÑ∏Ìûà Í¥ÄÎ¶¨ÌïòÍ≥† ÏÉàÎ°úÏö¥ Ìà¨ÏûêÎ•º Ìï† Ïàò ÏûàÏäµÎãàÎã§.",
    action: "Add Position Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 5,
    title: "Ï¢ÖÎ™© Í¥ÄÎ¶¨ üìã",
    description: "Î≥¥Ïú† Ï¢ÖÎ™©Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.",
    page: "portfolio",
    target: ".tutorial-target-holdings-table",
    position: "top",
    content: "Í∞Å Ï¢ÖÎ™©Ïùò ÏàòÏùµÎ•†Í≥º ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏ÌïòÍ≥† Í±∞ÎûòÌï† Ïàò ÏûàÏäµÎãàÎã§.",
    action: "Ï¢ÖÎ™© ÌñâÏùÑ ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò 'Î≥¥Í∏∞' Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 6,
    title: "AI Ìà¨Ïûê ÏÉÅÎã¥ ü§ñ",
    description: "AIÏôÄ Ìà¨Ïûê ÏÉÅÎã¥ÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî.",
    page: "ai-chat",
    target: null,
    position: "center",
    content: "24/7 AI Ìà¨Ïûê Ï†ÑÎ¨∏Í∞ÄÏôÄ ÎåÄÌôîÌïòÎ©∞ ÎßûÏ∂§Ìòï Ï°∞Ïñ∏ÏùÑ Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.",
    action: "Ï†úÏïàÎêú ÏßàÎ¨∏ÏùÑ ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÏßÅÏ†ë ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 7,
    title: "ÏÑ§Ï†ï Í¥ÄÎ¶¨ ‚öôÔ∏è",
    description: "Í∞úÏù∏ ÎßûÏ∂§ ÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨ÌïòÏÑ∏Ïöî.",
    page: "settings",
    target: ".max-w-4xl",
    position: "top",
    content: "Ìà¨Ïûê ÏÑ±Ìñ•, ÏïåÎ¶º, Î≥¥Ïïà Îì±ÏùÑ Í∞úÏù∏ÌôîÌï† Ïàò ÏûàÏäµÎãàÎã§.",
    action: "Í∞Å ÏÑ§Ï†ï Ïπ¥ÎìúÎ•º ÌÅ¥Î¶≠Ìï¥ÏÑú ÏÉÅÏÑ∏ ÏòµÏÖòÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî",
  },
  {
    id: 8,
    title: "ÌäúÌÜ†Î¶¨Ïñº ÏôÑÎ£å! üöÄ",
    description: "Î™®Îì† Í∏∞Îä•ÏùÑ Ï≤¥ÌóòÌï¥Î≥¥ÏÖ®ÏäµÎãàÎã§!",
    page: "dashboard",
    target: null,
    position: "center",
    content: "Ïù¥Ï†ú Í∏∞Í∞Ä Î≤ÑÌïèÏùò Î™®Îì† Í∏∞Îä•ÏùÑ ÏûêÏú†Î°≠Í≤å ÏÇ¨Ïö©ÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.",
    action: "ÏÑ±Í≥µÏ†ÅÏù∏ Ìà¨ÏûêÎ•º ÏúÑÌï¥ Í∏∞Í∞Ä Î≤ÑÌïèÍ≥º Ìï®Íªò ÏãúÏûëÌïòÏÑ∏Ïöî!",
  },
]

interface InteractiveTutorialProps {
  onComplete: () => void
  onPageChange: (page: string) => void
  userProfile: any
  currentPage: string
}

export default function InteractiveTutorial({
  onComplete,
  onPageChange,
  userProfile,
  currentPage,
}: InteractiveTutorialProps) {
  const [currentStep, setCurrentStep] = useState(0)
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [highlightRect, setHighlightRect] = useState<DOMRect | null>(null)

  useEffect(() => {
    if (currentStep === 0) {
      onPageChange("dashboard")
    }
  }, [])

  useEffect(() => {
    const step = tutorialSteps[currentStep]
    if (step && step.page !== currentPage) {
      setIsTransitioning(true)
      onPageChange(step.page)
      setTimeout(() => {
        setIsTransitioning(false)
        updateHighlight()
      }, 500)
    } else {
      setTimeout(() => updateHighlight(), 100)
    }
  }, [currentStep, onPageChange, currentPage])

  const updateHighlight = () => {
    const step = tutorialSteps[currentStep]
    if (step.target) {
      const element = document.querySelector(step.target)
      if (element) {
        const rect = element.getBoundingClientRect()
        setHighlightRect(rect)
      } else {
        setHighlightRect(null)
      }
    } else {
      setHighlightRect(null)
    }
  }

  const handleNext = () => {
    if (currentStep < tutorialSteps.length - 1) {
      setCurrentStep(currentStep + 1)
    } else {
      setHighlightRect(null)
      onComplete()
    }
  }

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const handleSkip = () => {
    setHighlightRect(null)
    onComplete()
  }

  const currentTutorial = tutorialSteps[currentStep]
  const progress = ((currentStep + 1) / tutorialSteps.length) * 100

  const getTooltipPosition = () => {
    if (!highlightRect) return "fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"

    const tooltipWidth = 400
    const tooltipHeight = 200

    switch (currentTutorial.position) {
      case "bottom":
        return `fixed top-[${highlightRect.bottom + 20}px] left-[${highlightRect.left + highlightRect.width / 2 - tooltipWidth / 2}px]`
      case "top":
        return `fixed top-[${highlightRect.top - tooltipHeight - 20}px] left-[${highlightRect.left + highlightRect.width / 2 - tooltipWidth / 2}px]`
      case "bottom-right":
        return `fixed top-[${highlightRect.bottom + 20}px] left-[${highlightRect.right - tooltipWidth}px]`
      default:
        return "fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
    }
  }

  return (
    <div className="fixed inset-0 z-50 animate-fade-in">
      {/* Ïò§Î≤ÑÎ†àÏù¥ */}
      <div className="absolute inset-0 bg-black/70 backdrop-blur-sm transition-all duration-500" />

      {/* ÌïòÏù¥ÎùºÏù¥Ìä∏ */}
      {highlightRect && (
        <div
          className="absolute bg-transparent border-4 border-blue-400 rounded-lg shadow-2xl transition-all duration-500"
          style={{
            top: highlightRect.top - 10,
            left: highlightRect.left - 10,
            width: highlightRect.width + 20,
            height: highlightRect.height + 20,
            boxShadow: `0 0 0 9999px rgba(0, 0, 0, 0.7), 0 0 30px rgba(59, 130, 246, 0.5)`,
            animation: "highlight-pulse 2s ease-in-out infinite",
          }}
        />
      )}

      {/* ÌäúÌÜ†Î¶¨Ïñº Ïπ¥Îìú */}
      <div className={getTooltipPosition()}>
        <Card className="w-96 shadow-2xl border-2 border-blue-400 bg-gray-800/95 backdrop-blur-sm animate-slide-up">
          <CardContent className="p-6">
            {/* Ìó§Îçî */}
            <div className="flex justify-between items-start mb-4">
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-2">
                  <h3 className="text-xl font-bold text-white">{currentTutorial.title}</h3>
                  {isTransitioning && (
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
                  )}
                </div>
                <p className="text-gray-300 text-sm mb-3">{currentTutorial.description}</p>
              </div>
              <Button variant="ghost" size="sm" onClick={handleSkip} className="text-gray-400 hover:text-white p-1">
                <XMarkIcon className="w-5 h-5" />
              </Button>
            </div>

            {/* ÏΩòÌÖêÏ∏† */}
            <div className="mb-6">
              <div className="bg-blue-500/20 rounded-lg p-4 mb-4 border border-blue-500/30">
                <p className="text-blue-100 font-medium">{currentTutorial.content}</p>
              </div>

              <div className="bg-gray-700/50 rounded-lg p-4 border border-gray-600/30">
                <div className="flex items-start space-x-3">
                  <EyeIcon className="w-5 h-5 text-green-400 mt-0.5 flex-shrink-0" />
                  <p className="text-gray-300 text-sm">{currentTutorial.action}</p>
                </div>
              </div>
            </div>

            {/* ÏßÑÌñâÎ•† */}
            <div className="mb-4">
              <div className="flex justify-between text-sm text-gray-400 mb-2">
                <span>
                  {currentStep + 1} / {tutorialSteps.length}
                </span>
                <span>{Math.round(progress)}% ÏôÑÎ£å</span>
              </div>
              <Progress value={progress} className="h-2 bg-gray-700" />
            </div>

            {/* ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
            <div className="flex justify-between items-center">
              <Button
                variant="outline"
                onClick={handlePrev}
                disabled={currentStep === 0}
                className="flex items-center space-x-2 bg-transparent border-gray-600 text-gray-300 hover:bg-gray-700/50 hover:text-white"
              >
                <ArrowLeftIcon className="w-4 h-4" />
                <span>Ïù¥Ï†Ñ</span>
              </Button>

              <div className="flex space-x-1">
                {tutorialSteps.map((_, index) => (
                  <div
                    key={index}
                    className={`w-2 h-2 rounded-full transition-colors ${
                      index === currentStep ? "bg-blue-400" : "bg-gray-600"
                    }`}
                  />
                ))}
              </div>

              <Button
                onClick={handleNext}
                disabled={isTransitioning}
                className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white flex items-center space-x-2"
              >
                <span>{currentStep === tutorialSteps.length - 1 ? "ÏôÑÎ£å" : "Îã§Ïùå"}</span>
                {currentStep !== tutorialSteps.length - 1 && <ArrowRightIcon className="w-4 h-4" />}
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* ÌïòÏù¥ÎùºÏù¥Ìä∏ Ïï†ÎãàÎ©îÏù¥ÏÖò */}
      <style jsx>{`
        @keyframes highlight-pulse {
          0%, 100% {
            border-color: #3b82f6;
            box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.7), 0 0 30px rgba(59, 130, 246, 0.5);
          }
          50% {
            border-color: #60a5fa;
            box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.7), 0 0 40px rgba(59, 130, 246, 0.8);
          }
        }
      `}</style>
    </div>
  )
}
